
import { Context, Schema, h } from 'koishi'
import {} from 'koishi-plugin-puppeteer'

export const name = 'my-menu'
export const inject = ['puppeteer']

export interface Config {
  defaultCategory: string
  enableCategories: boolean
  itemsPerPage: number
  allowUserSuggestions: boolean
  adminPermission: string
  enableImageMenu: boolean
  imageFooterText: string
  imageWidth: number
  imageColumnWidth: number
  defaultItems: Array<{
    id: string
    name: string
    description: string
    command: string
    category: string
    enabled: boolean
    order: number
    permissions: string[]
  }>
}

export const Config: Schema<Config> = Schema.object({
  defaultCategory: Schema.string().default('ÈÄöÁî®ÂäüËÉΩ').description('ÈªòËÆ§ÂàÜÁ±ªÂêçÁß∞'),
  enableCategories: Schema.boolean().default(true).description('ÂêØÁî®ÂàÜÁ±ªÊòæÁ§∫'),
  itemsPerPage: Schema.number().min(5).max(50).default(10).description('ÊØèÈ°µÊòæÁ§∫ËèúÂçïÈ°πÊï∞Èáè'),
  allowUserSuggestions: Schema.boolean().default(true).description('ÂÖÅËÆ∏Áî®Êà∑Âª∫ËÆÆÊñ∞ËèúÂçïÈ°π'),
  adminPermission: Schema.string().default('menu.admin').description('ËèúÂçïÁÆ°ÁêÜÊùÉÈôê'),
  enableImageMenu: Schema.boolean().default(false).description('ÂêØÁî®ÂõæÁâáËèúÂçï'),
  imageFooterText: Schema.string().default('ËèúÂçïÁÆ°ÁêÜÊèí‰ª∂ | ‰ΩøÁî® menu -i Êü•ÁúãÂõæÁâáËèúÂçï').description('ÂõæÁâáÂ∫ïÈÉ®È¢ùÂ§ñ‰ø°ÊÅØ'),
  imageWidth: Schema.number().min(800).max(2000).default(1600).description('ÂõæÁâáÁîüÊàêÂÆΩÂ∫¶ÔºàÂÉèÁ¥†ÔºâÔºåÂΩ±ÂìçÂ§öÂàóÂ∏ÉÂ±ÄÊïàÊûú'),
  imageColumnWidth: Schema.number().min(200).max(600).default(400).description('ÊØèÂàóÊúÄÂ∞èÂÆΩÂ∫¶ÔºàÂÉèÁ¥†ÔºâÔºåÂÆΩÂ∫¶Èô§‰ª•Ê≠§ÂÄºËÆ°ÁÆóÂàóÊï∞'),
  defaultItems: Schema.array(Schema.object({
    id: Schema.string().required().description('ËèúÂçïÈ°πID'),
    name: Schema.string().required().description('ËèúÂçïÈ°πÂêçÁß∞'),
    description: Schema.string().required().description('ËèúÂçïÈ°πÊèèËø∞'),
    command: Schema.string().required().description('ËèúÂçïÈ°πÂëΩ‰ª§'),
    category: Schema.string().required().description('ËèúÂçïÈ°πÂàÜÁ±ª'),
    enabled: Schema.boolean().default(true).description('ÊòØÂê¶ÂêØÁî®'),
    order: Schema.number().default(1).description('ÊòæÁ§∫È°∫Â∫è'),
    permissions: Schema.array(Schema.string()).default([]).description('ÊùÉÈôêË¶ÅÊ±Ç')
  })).default([
    {
      id: 'signin',
      name: 'Á≠æÂà∞',
      description: 'ÊØèÊó•Á≠æÂà∞Ëé∑ÂèñÁßØÂàÜ',
      command: '#Á≠æÂà∞',
      category: 'Êó•Â∏∏',
      enabled: true,
      order: 1,
      permissions: []
    },
    {
      id: 'hitokoto',
      name: '‰∏ÄË®Ä',
      description: 'Ëé∑Âèñ‰∏ÄÊù°ÈöèÊú∫ÂêçË®ÄÊàñÂè•Â≠ê',
      command: '#‰∏ÄË®Ä',
      category: 'Â®±‰πê',
      enabled: true,
      order: 2,
      permissions: []
    },
    {
      id: 'music',
      name: 'ÁÇπÊ≠å',
      description: 'ÁÇπÊí≠ÊåáÂÆöÊ≠åÊõ≤',
      command: '#ÁÇπÊ≠å [Ê≠åÊõ≤]',
      category: 'Â®±‰πê',
      enabled: true,
      order: 3,
      permissions: []
    },
    {
      id: 'domain',
      name: 'ÂüüÂêçÊü•ËØ¢',
      description: 'Êü•ËØ¢ÂüüÂêç‰ø°ÊÅØ',
      command: '#ÂüüÂêç [ÂüüÂêç]',
      category: 'Â∑•ÂÖ∑',
      enabled: true,
      order: 4,
      permissions: []
    },
    {
      id: 'server',
      name: 'ÊúçÂä°Âô®Áä∂ÊÄÅ',
      description: 'Êü•ËØ¢ÊúçÂä°Âô®Áä∂ÊÄÅ‰ø°ÊÅØ',
      command: '#ÊúçÂä°Âô® (Âú∞ÂùÄ)',
      category: 'Â∑•ÂÖ∑',
      enabled: true,
      order: 5,
      permissions: []
    }
  ]).description('ÈªòËÆ§ËèúÂçïÈ°πÈÖçÁΩÆ')
})

export function apply(ctx: Context, config: Config) {
  // Ê£ÄÊü• puppeteer ÊúçÂä°ÊòØÂê¶ÂèØÁî®
  if (!ctx.puppeteer) {
    console.warn('puppeteer ÊúçÂä°Êú™ÊâæÂà∞ÔºåÂõæÁâáËèúÂçïÂäüËÉΩÂ∞Ü‰∏çÂèØÁî®„ÄÇËØ∑ÂÆâË£ÖÂπ∂ÂêØÁî® koishi-plugin-puppeteer Êèí‰ª∂„ÄÇ')
  }

  // ÂàùÂßãÂåñËèúÂçïÊï∞ÊçÆÂ≠òÂÇ®
  const menuItems = new Map()
  // ‰ΩøÁî®ÈÖçÁΩÆ‰∏≠ÁöÑÈªòËÆ§ËèúÂçïÈ°π
  config.defaultItems.forEach(item => menuItems.set(item.id, item))
  // ÊùÉÈôêÊ£ÄÊü•ËæÖÂä©ÂáΩÊï∞
  async function checkPermission(session, permission) {
    // ÊñπÊ≥ï1: ‰ΩøÁî® session ÁöÑÊùÉÈôêÂ≠óÊÆµÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    if (session.user?.authority && session.user.authority >= 3) {
      return true
    }
    // ÊñπÊ≥ï2: ‰ΩøÁî® Koishi ÁöÑÊùÉÈôêÁ≥ªÁªüÔºàÂ¶ÇÊûúÈÖçÁΩÆ‰∫ÜÊùÉÈôêÊèí‰ª∂Ôºâ
    try {
      // Â∞ùËØï‰ΩøÁî® ctx.permissions Ê£ÄÊü•ÊùÉÈôê
      if (ctx.permissions) {
        return await ctx.permissions.test(permission, session)
      }
    }
    catch (error) {
      // Â¶ÇÊûúÊùÉÈôêÁ≥ªÁªü‰∏çÂèØÁî®ÔºåÂõûÈÄÄÂà∞Âü∫‰∫éÁî®Êà∑IDÁöÑÁÆÄÂçïÊ£ÄÊü•
      console.warn('ÊùÉÈôêÁ≥ªÁªü‰∏çÂèØÁî®Ôºå‰ΩøÁî®Âü∫‰∫éÁî®Êà∑IDÁöÑÁÆÄÂçïÊ£ÄÊü•')
    }
    // ÊñπÊ≥ï3: ÁÆÄÂçïÁöÑÁÆ°ÁêÜÂëòIDÊ£ÄÊü•ÔºàÁîü‰∫ßÁéØÂ¢É‰∏≠Â∫îËØ•ÈÖçÁΩÆÊõ¥ÂÆâÂÖ®ÁöÑÊùÉÈôêÁ≥ªÁªüÔºâ
    const adminUsers = ['123456789', '987654321'] // ÊõøÊç¢‰∏∫ÂÆûÈôÖÁöÑÁÆ°ÁêÜÂëòÁî®Êà∑ID
    return adminUsers.includes(session.userId)
  }
  // ÁîüÊàêËèúÂçïÂõæÁâáÁöÑËæÖÂä©ÂáΩÊï∞
  async function generateMenuImage(items, pageNum, totalPages, category, all = false) {
    if (!ctx.puppeteer) {
      throw new Error('puppeteer ÊúçÂä°‰∏çÂèØÁî®ÔºåÊó†Ê≥ïÁîüÊàêÂõæÁâáËèúÂçï')
    }

    // ËÆ°ÁÆóÂä®ÊÄÅÂàóÊï∞
    const columns = Math.floor(config.imageWidth / config.imageColumnWidth)
    const flexBasis = `calc(${100 / columns}% - ${12 / columns}px)`
    const gapSize = 12

    // ÊûÑÂª∫‰∏ã‰∏ÄÈ°µÊèêÁ§∫
    let nextPageHint = ''
    if (!all && totalPages > 1 && pageNum < totalPages) {
      nextPageHint = `<div class="next-page-hint">üìÑ ‰∏ã‰∏ÄÈ°µ: menu -p ${pageNum + 1}${category ? ` -c ${category}` : ''} -i</div>`
    }

    const html = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body {
      font-family: 'Microsoft YaHei', 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      margin: 0;
      padding: 8px;
      color: #333;
      min-height: 100vh;
    }
    .container {
      max-width: 1100px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 0.95);
      border-radius: 15px;
      padding: 18px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }
    .header {
      text-align: center;
      margin-bottom: 30px;
      border-bottom: 3px solid #667eea;
      padding-bottom: 15px;
    }
    .title {
      font-size: 40px;
      font-weight: bold;
      color: #667eea;
      margin: 0;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }
    .subtitle {
      font-size: 20px;
      color: #666;
      margin-top: 8px;
    }
    .category {
      margin-bottom: 25px;
    }
    .category-title {
      font-size: 24px;
      font-weight: bold;
      color: #764ba2;
      margin-bottom: 15px;
      padding-left: 10px;
      border-left: 4px solid #764ba2;
    }
    .menu-grid {
      display: flex;
      flex-wrap: wrap;
      gap: ${gapSize}px;
      margin-bottom: 15px;
    }
    .menu-item {
      flex: 1 1 ${flexBasis};
      background: white;
      border-radius: 12px;
      padding: 14px;
      border: 2px solid #e9ecef;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      min-width: 0;
      display: flex;
      flex-direction: column;
    }
    .menu-item:hover {
      border-color: #667eea;
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    .item-name {
      font-size: 22px;
      font-weight: bold;
      color: #333;
      margin-bottom: 8px;
    }
    .item-description {
      font-size: 18px;
      color: #666;
      margin-bottom: 10px;
      line-height: 1.5;
    }
    .item-command {
      font-size: 16px;
      color: #667eea;
      font-family: 'Courier New', monospace;
      background: #f8f9fa;
      padding: 6px 12px;
      border-radius: 6px;
      display: inline-block;
      word-break: break-all;
    }
    .footer {
      text-align: center;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 2px solid #e9ecef;
      color: #666;
      font-size: 18px;
      line-height: 1.6;
      white-space: pre-line;
      word-wrap: break-word;
    }
    .footer div {
      margin-bottom: 8px;
    }
    .page-info {
      font-weight: bold;
      color: #667eea;
    }
    .next-page-hint {
      margin-top: 10px;
      color: #667eea;
      font-weight: bold;
      font-size: 16px;
    }
    .full-menu-indicator {
      color: #28a745;
      font-weight: bold;
      font-size: 16px;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1 class="title">üìã ÂäüËÉΩËèúÂçï</h1>
      ${category ? `<div class="subtitle">ÂàÜÁ±ª: ${category}</div>` : ''}
    </div>

    ${config.enableCategories ?
      [...new Set(items.map(item => item.category))].map(cat => `
        <div class="category">
          <div class="category-title">üìÅ ${cat}</div>
          <div class="menu-grid">
            ${items.filter(item => item.category === cat).map(item => `
              <div class="menu-item">
                <div class="item-name">‚Ä¢ ${item.name}</div>
                <div class="item-description">${item.description}</div>
                <div class="item-command">üí° ‰ΩøÁî®: ${item.command}</div>
              </div>
            `).join('')}
          </div>
        </div>
      `).join('') :
      `
        <div class="menu-grid">
          ${items.map(item => `
            <div class="menu-item">
              <div class="item-name">‚Ä¢ ${item.name}</div>
              <div class="item-description">${item.description}</div>
              <div class="item-command">üí° ‰ΩøÁî®: ${item.command}</div>
            </div>
          `).join('')}
        </div>
      `}

    <div class="footer">
      ${totalPages > 1 ? `<div>Á¨¨ <span class="page-info">${pageNum}</span> / <span class="page-info">${totalPages}</span> È°µ</div>` : ''}
      ${all ? '<div class="full-menu-indicator">üìã ÂÆåÊï¥ËèúÂçïÔºà‰∏çÂàÜÈ°µÔºâ</div>' : ''}
      ${nextPageHint}
      <div>${config.imageFooterText}</div>
    </div>
  </div>
</body>
</html>
    `

    const browserPage = await ctx.puppeteer.page()
    try {
      await browserPage.setViewport({ width: config.imageWidth, height: 2000 })
      await browserPage.setContent(html, { waitUntil: 'networkidle0' })
      
      const buffer = await browserPage.screenshot({
        type: 'png',
        fullPage: true,
        encoding: 'binary'
      })
      
      return buffer
    } catch (error) {
      console.error('Puppeteer screenshot error:', error)
      throw error
    } finally {
      await browserPage.close()
    }
  }
  // ‰∏ªËèúÂçïÂëΩ‰ª§
  ctx.command('menu', 'ÊòæÁ§∫ÂäüËÉΩËèúÂçï')
    .option('category', '-c <category:string> ÊåáÂÆöÂàÜÁ±ª')
    .option('page', '-p <page:number> È°µÁ†Å')
    .option('image', '-i ‰ª•ÂõæÁâáÂΩ¢ÂºèÊòæÁ§∫ËèúÂçï')
    .option('all', '-a ÊòæÁ§∫ÊâÄÊúâËèúÂçïÈ°πÔºà‰∏çÂàÜÈ°µÔºâ')
    .action(async ({ session, options }) => {
      const { category, page = 1, image, all } = options
      let filteredItems = Array.from(menuItems.values())
        .filter(item => item.enabled)
      // ÊåâÂàÜÁ±ªËøáÊª§
      if (category) {
        filteredItems = filteredItems.filter(item => item.category.toLowerCase().includes(category.toLowerCase()))
      }
      // ÊåâÈ°∫Â∫èÊéíÂ∫è
      filteredItems.sort((a, b) => a.order - b.order)
      
      // ‰∏çÂàÜÈ°µÂ§ÑÁêÜ
      let pageItems, currentPage, totalPagesValue
      if (all) {
        pageItems = filteredItems
        currentPage = 1
        totalPagesValue = 1
      } else {
        // ÂàÜÈ°µÂ§ÑÁêÜ
        const startIndex = (page - 1) * config.itemsPerPage
        const endIndex = startIndex + config.itemsPerPage
        pageItems = filteredItems.slice(startIndex, endIndex)
        currentPage = page
        totalPagesValue = Math.ceil(filteredItems.length / config.itemsPerPage)
      }
      
      if (pageItems.length === 0) {
        return `Ê≤°ÊúâÊâæÂà∞ËèúÂçïÈ°π${category ? `Âú®ÂàÜÁ±ª"${category}"‰∏≠` : ''}„ÄÇ`
      }
        // ÊûÑÂª∫ËèúÂçïÊòæÁ§∫
        const useImage = image || config.enableImageMenu
        if (useImage) {
          if (!ctx.puppeteer) {
            return 'ÂõæÁâáËèúÂçïÂäüËÉΩ‰∏çÂèØÁî®ÔºåËØ∑ÂÆâË£ÖÂπ∂ÂêØÁî® koishi-plugin-puppeteer Êèí‰ª∂„ÄÇ'
          }
          try {
            const imageBuffer = await generateMenuImage(pageItems, currentPage, totalPagesValue, category, all)
            return h.image(imageBuffer, 'image/png')
          }
          catch (error) {
            console.error('ÁîüÊàêËèúÂçïÂõæÁâáÂ§±Ë¥•:', error)
            return 'ÁîüÊàêÂõæÁâáËèúÂçïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•puppeteerÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å„ÄÇ'
          }
        }
      let output = 'üìã ÂäüËÉΩËèúÂçï\n\n'
      if (config.enableCategories) {
        const categories = [...new Set(pageItems.map(item => item.category))]
        for (const cat of categories) {
          output += `üìÅ ${cat}\n`
          const categoryItems = pageItems.filter(item => item.category === cat)
          categoryItems.forEach(item => {
            output += `  ‚Ä¢ ${item.name} - ${item.description}\n`
            output += `    üí° ‰ΩøÁî®: ${item.command}\n\n`
          })
        }
      }
      else {
        pageItems.forEach(item => {
          output += `‚Ä¢ ${item.name} - ${item.description}\n`
          output += `  üí° ‰ΩøÁî®: ${item.command}\n\n`
        })
      }
      // Ê∑ªÂä†ÂàÜÈ°µ‰ø°ÊÅØ
      const totalPagesForText = Math.ceil(filteredItems.length / config.itemsPerPage)
      if (totalPagesForText > 1) {
        output += `\nÁ¨¨ ${page}/${totalPagesForText} È°µÔºå‰ΩøÁî® menu -p ${page + 1} Êü•Áúã‰∏ã‰∏ÄÈ°µ`
      }
      // ÊèêÁ§∫ÂõæÁâáËèúÂçïÂäüËÉΩ
      if (!useImage) {
        output += `\n\nüí° ÊèêÁ§∫: ‰ΩøÁî® menu -i ‰ª•ÂõæÁâáÂΩ¢ÂºèÊòæÁ§∫ËèúÂçï`
      }
      return output
    })
  // Ê∑ªÂä†ËèúÂçïÈ°πÂëΩ‰ª§ÔºàÈúÄË¶ÅÊùÉÈôêÔºâ
  ctx.command('menu.add <name:string> <command:string>', 'Ê∑ªÂä†Êñ∞ËèúÂçïÈ°π')
    .option('description', '-d <desc:string> ÊèèËø∞‰ø°ÊÅØ')
    .option('category', '-c <cat:string> ÂàÜÁ±ªÂêçÁß∞')
    .option('order', '-o <order:number> ÊòæÁ§∫È°∫Â∫è')
    .action(async ({ session, options }, name, command) => {
      if (!name || !command) {
        return 'ËØ∑ËæìÂÖ•ËèúÂçïÈ°πÂêçÁß∞ÂíåÂëΩ‰ª§„ÄÇ'
      }
      // ÊùÉÈôêÊ£ÄÊü•
      if (!session?.userId || !(await checkPermission(session, config.adminPermission))) {
        return 'ÊÇ®Ê≤°ÊúâÊùÉÈôêÊâßË°åÊ≠§Êìç‰Ωú„ÄÇ'
      }
      const id = name.toLowerCase()
        .replace(/[^a-z0-9\u4e00-\u9fa5]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '') + '-' + Date.now().toString(36)
      const newItem = {
        id,
        name,
        description: options.description || 'ÊöÇÊó†ÊèèËø∞',
        command,
        category: options.category || config.defaultCategory,
        enabled: true,
        order: options.order || menuItems.size + 1
      }
      menuItems.set(id, newItem)
      return `‚úÖ ËèúÂçïÈ°π "${name}" Ê∑ªÂä†ÊàêÂäüÔºÅID: ${id}`
    })
  // ÂàóÂá∫ËèúÂçïÈ°πÂëΩ‰ª§
  ctx.command('menu.list [category:string]', 'ÂàóÂá∫ËèúÂçïÈ°π')
    .action(({ session }, category) => {
      let items = Array.from(menuItems.values())
      if (category) {
        items = items.filter(item => item.category.toLowerCase().includes(category.toLowerCase()))
      }
      if (items.length === 0) {
        return `Ê≤°ÊúâÊâæÂà∞${category ? `ÂàÜÁ±ª"${category}"ÁöÑ` : ''}ËèúÂçïÈ°π„ÄÇ`
      }
      let output = `üìã ËèúÂçïÈ°πÂàóË°®${category ? ` (ÂàÜÁ±ª: ${category})` : ''}\n\n`
      items.sort((a, b) => a.order - b.order).forEach(item => {
        output += `üÜî ${item.id}\n`
        output += `üìõ ÂêçÁß∞: ${item.name}\n`
        output += `üìñ ÊèèËø∞: ${item.description}\n`
        output += `‚ö° ÂëΩ‰ª§: ${item.command}\n`
        output += `üìÅ ÂàÜÁ±ª: ${item.category}\n`
        output += `üìä È°∫Â∫è: ${item.order}\n`
        output += `üîß Áä∂ÊÄÅ: ${item.enabled ? '‚úÖ ÂêØÁî®' : '‚ùå Á¶ÅÁî®'}\n`
        output += '‚îÄ'.repeat(20) + '\n'
      })
      return output
    })
  // ÊêúÁ¥¢ËèúÂçïÈ°πÂëΩ‰ª§
  ctx.command('menu.search <keyword:string>', 'ÊêúÁ¥¢ËèúÂçïÈ°π')
    .action(({ session }, keyword) => {
      if (!keyword) {
        return 'ËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØç„ÄÇ'
      }
      const results = Array.from(menuItems.values()).filter(item => item.name.toLowerCase().includes(keyword.toLowerCase()) ||
        item.description.toLowerCase().includes(keyword.toLowerCase()) ||
        item.command.toLowerCase().includes(keyword.toLowerCase()) ||
        item.category.toLowerCase().includes(keyword.toLowerCase()))
      if (results.length === 0) {
        return `Ê≤°ÊúâÊâæÂà∞ÂåÖÂê´"${keyword}"ÁöÑËèúÂçïÈ°π„ÄÇ`
      }
      let output = `üîç ÊêúÁ¥¢ÁªìÊûú (ÂÖ≥ÈîÆËØç: "${keyword}")\n\n`
      results.forEach(item => {
        output += `‚Ä¢ ${item.name} - ${item.description}\n`
        output += `  üí° ‰ΩøÁî®: ${item.command}\n`
        output += `  üìÅ ÂàÜÁ±ª: ${item.category}\n\n`
      })
      return output
    })
  // ÂàáÊç¢ËèúÂçïÈ°πÁä∂ÊÄÅÂëΩ‰ª§ÔºàÈúÄË¶ÅÊùÉÈôêÔºâ
  ctx.command('menu.toggle <id:string>', 'ÂêØÁî®/Á¶ÅÁî®ËèúÂçïÈ°π')
    .action(async ({ session }, id) => {
      if (!session?.userId || !(await checkPermission(session, config.adminPermission))) {
        return 'ÊÇ®Ê≤°ÊúâÊùÉÈôêÊâßË°åÊ≠§Êìç‰Ωú„ÄÇ'
      }
      const item = menuItems.get(id)
      if (!item) {
        return `Êú™ÊâæÂà∞ID‰∏∫"${id}"ÁöÑËèúÂçïÈ°π„ÄÇ`
      }
      item.enabled = !item.enabled
      menuItems.set(id, item)
      return `‚úÖ ËèúÂçïÈ°π "${item.name}" Â∑≤${item.enabled ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}„ÄÇ`
    })
  // Âà†Èô§ËèúÂçïÈ°πÂëΩ‰ª§ÔºàÈúÄË¶ÅÊùÉÈôêÔºâ
  ctx.command('menu.delete <id:string>', 'Âà†Èô§ËèúÂçïÈ°π')
    .action(async ({ session }, id) => {
      if (!session?.userId || !(await checkPermission(session, config.adminPermission))) {
        return 'ÊÇ®Ê≤°ÊúâÊùÉÈôêÊâßË°åÊ≠§Êìç‰Ωú„ÄÇ'
      }
      const item = menuItems.get(id)
      if (!item) {
        return `Êú™ÊâæÂà∞ID‰∏∫"${id}"ÁöÑËèúÂçïÈ°π„ÄÇ`
      }
      menuItems.delete(id)
      return `‚úÖ ËèúÂçïÈ°π "${item.name}" Â∑≤Âà†Èô§„ÄÇ`
    })
  // ÁºñËæëËèúÂçïÈ°πÂëΩ‰ª§ÔºàÈúÄË¶ÅÊùÉÈôêÔºâ
  ctx.command('menu.edit <id:string>', 'ÁºñËæëËèúÂçïÈ°π')
    .option('name', '-n <name:string> Êñ∞ÂêçÁß∞')
    .option('description', '-d <desc:string> Êñ∞ÊèèËø∞')
    .option('command', '-c <command:string> Êñ∞ÂëΩ‰ª§')
    .option('category', '-cat <category:string> Êñ∞ÂàÜÁ±ª')
    .option('order', '-o <order:number> Êñ∞È°∫Â∫è')
    .action(async ({ session, options }, id) => {
      if (!session?.userId || !(await checkPermission(session, config.adminPermission))) {
        return 'ÊÇ®Ê≤°ÊúâÊùÉÈôêÊâßË°åÊ≠§Êìç‰Ωú„ÄÇ'
      }
      const item = menuItems.get(id)
      if (!item) {
        return `Êú™ÊâæÂà∞ID‰∏∫"${id}"ÁöÑËèúÂçïÈ°π„ÄÇ`
      }
      // Êõ¥Êñ∞Â≠óÊÆµ
      if (options.name)
        item.name = options.name
      if (options.description)
        item.description = options.description
      if (options.command)
        item.command = options.command
      if (options.category)
        item.category = options.category
      if (options.order)
        item.order = options.order
      menuItems.set(id, item)
      return `‚úÖ ËèúÂçïÈ°π "${item.name}" Êõ¥Êñ∞ÊàêÂäüÔºÅ`
    })
  // ÂàÜÁ±ªÁÆ°ÁêÜÂëΩ‰ª§ÔºàÈúÄË¶ÅÊùÉÈôêÔºâ
  ctx.command('menu.category', 'ÂàÜÁ±ªÁÆ°ÁêÜ')
    .subcommand('.list', 'ÂàóÂá∫ÊâÄÊúâÂàÜÁ±ª')
    .action(({ session }) => {
      const categories = [...new Set(Array.from(menuItems.values()).map(item => item.category))]
      if (categories.length === 0) {
        return 'ÊöÇÊó†ÂàÜÁ±ª„ÄÇ'
      }
      return `üìÅ ÊâÄÊúâÂàÜÁ±ª:\n${categories.map(cat => `‚Ä¢ ${cat}`).join('\n')}`
    })
    .subcommand('.change <id:string> <newCategory:string>', 'Êõ¥ÊîπËèúÂçïÈ°πÂàÜÁ±ª')
    .action(async ({ session }, id, newCategory) => {
      if (!session?.userId || !(await checkPermission(session, config.adminPermission))) {
        return 'ÊÇ®Ê≤°ÊúâÊùÉÈôêÊâßË°åÊ≠§Êìç‰Ωú„ÄÇ'
      }
      const item = menuItems.get(id)
      if (!item) {
        return `Êú™ÊâæÂà∞ID‰∏∫"${id}"ÁöÑËèúÂçïÈ°π„ÄÇ`
      }
      const oldCategory = item.category
      item.category = newCategory
      menuItems.set(id, item)
      return `‚úÖ ËèúÂçïÈ°π "${item.name}" Â∑≤‰ªé"${oldCategory}"ÁßªÂä®Âà∞"${newCategory}"„ÄÇ`
    })
  // Áî®Êà∑Âª∫ËÆÆÂäüËÉΩ
  if (config.allowUserSuggestions) {
    ctx.command('menu.suggest <name:string> <command:string>', 'Âª∫ËÆÆÊñ∞ËèúÂçïÈ°π')
      .option('description', '-d <desc:string> ÊèèËø∞‰ø°ÊÅØ')
      .action(({ session, options }, name, command) => {
        // Âú®ÂÆûÈôÖÂ∫îÁî®‰∏≠ÔºåËøôÈáåÂèØ‰ª•Â∞ÜÂª∫ËÆÆ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ìÊàñÂèëÈÄÅÁªôÁÆ°ÁêÜÂëò
        const suggestion = {
          name,
          command,
          description: options.description || 'ÊöÇÊó†ÊèèËø∞',
          userId: session.userId,
          timestamp: new Date().toISOString()
        }
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†Â∞ÜÂª∫ËÆÆ‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ìÁöÑÈÄªËæë
        console.log('Áî®Êà∑Âª∫ËÆÆ:', suggestion)
        return `üìù ÊÑüË∞¢ÊÇ®ÁöÑÂª∫ËÆÆÔºÅËèúÂçïÈ°π "${name}" Â∑≤Êèê‰∫§ÁªôÁÆ°ÁêÜÂëòÂÆ°Ê†∏„ÄÇ`
      })
  }
  // Êèí‰ª∂Âç∏ËΩΩÊó∂Ê∏ÖÁêÜËµÑÊ∫ê
  ctx.on('dispose', () => {
    menuItems.clear()
  })
}
